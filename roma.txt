'''
https://pics.loveforquotes.com/el-pianista-tengo-hambre-blank-template-imgflip-52054132.png
https://pics.me.me/dont-shoot-dont-shoot-lm-a-polish-why-the-im-27579191.png
0xA00f4244 No Camera Are Attached
'''


##
# Instancia  um  objeto  da  classe Tk, respons`´avel por  criar
# a janela  principal. Aceita , na linha  de comando ,
# quatro  argumentos:
##   @param h help
#   @param n tamanho  do DNA1
#   @param m tamanho  do DNA2
#   @param v modo  verboso
##   Uso:#   -   move.py -n 6 -m 7 -v or
#   -   move.py --dna1=6 --dna2=7 -v or
#   -   move.py --help
#
def  main(argv=None):
if argv is None:
argv = sys.argv
n1 = n2 = 0
debug = False
try:
try:
# Op ̧c~oes, que  requeiram  um argumento , devem  ser
# seguidas  por  dois  pontos  (:).
# Op ̧c~oes longas , que  requeiram  um argumento ,
# devem  ser  seguidas  por um sinal  de igual  (’=’).
opts , args = getopt.getopt(argv [1:], "hn:m:v", \["help","dna1=","dna2="," verbose "])
except  getopt.GetoptError  as msg:
raise  ValueError (str(msg))
# opts  ́e uma  lista  de opc~oes com  pares  [(option1 , argument1),
#                                               (option2 , argument2 )]
# args  ́e a lista  de  argumentos  de  programa  que  sobra
# ap ́os a lista  de opc~oes ser  removida ,
# por  exemplo , "move.py -h --help 1 2",
# faz  opts e args  serem:
# [(’-h’,  ’’), (’--help ’,  ’’)] [’1’,  ’2’]for opt ,arg in opts:   
# alguma  coisa  como [(’-h’,  ’’)] or
#                       [(’--help ’,  ’’)]
if opt in ( "-h", "--help" ):
print  ("Usage  move.py -n1 <DNA1_length > \
-n2 <DNA2_length > -v")
return 1
elif  opt in ("-n", "--dna1 "):

n1 = int(arg)
elif  opt in ("-m", "--dna2 "):
n2 = int(arg)
elif  opt in ( "-v", "--verbose" ):
debug = Trueexcept  ValueError  as err:
print (str(err) + "\nFor help , type: %s --help" % argv [0])
return 2
master = Tk()
master.title ("DNA  Strand ")
gfg = GFG(master , n1 , n2 , debug)